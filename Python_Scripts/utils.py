# Import libraries
import yaml
import pybis

def save_yml_file(filepath: str, mode: str, dict_data: dict):
    """Save data in an YML file

    Args:
        filepath (str): Filepath where the data is going to be stored
        mode (str): Open file mode
        dict_data (dict): Dictionary with the data that is going to be stored
    """
    with open(filepath, mode = mode) as file:
        yaml.dump(dict_data, file)

def load_yml_file(filepath: str, mode: str) -> dict:
    """Load data from YML file

    Args:
        filepath (str): Filepath where the data is going to be stored
        mode (str): Open file mode

    Returns:
        dict: Dictionary with data stored in the YML file
    """
    with open(filepath, mode=mode) as fhandle:
        return yaml.safe_load(fhandle)
        
def convert_name_to_code(name: str) -> str:
    """Convert the element name to a code that can be interpreted by the openBIS API

    Args:
        name (str): Attributed name

    Returns:
        str: openBIS code
    """
    code = name.upper()
    code = code.replace(" ","_")
    return code

# TODO: As the session and the items variables are the same, maybe it is possible to create an object with all these functions (ex.: Class CreateObjectOpenBIS)
def create_new_vocabulary(session: pybis.pybis.Openbis, items: dict):
    """Create new vocabularies using details obtained from an YML file

    Args:
        session (pybis.pybis.Openbis): Connection between python and openBIS
        items (dict): Set of configuration details obtained from an YML file
    """
    all_vocabulary_database = session.get_vocabularies()

    for key, value in items['vocabularies'].items():
        new_vocabulary_code = key.upper()
        vocabulary_not_exists = session.get_vocabularies(new_vocabulary_code).df.empty

        if vocabulary_not_exists:
            print(new_vocabulary_code)
            session.new_vocabulary(code=new_vocabulary_code, **value).save()

def create_new_property_types(session: pybis.pybis.Openbis, items: dict):
    """Create new property types in openBIS using details obtained from an YML file

    Args:
        session (pybis.pybis.Openbis): Connection between python and openBIS
        items (dict): Set of configuration details obtained from an YML file
    """
    all_property_types_database = session.get_property_types()

    for key, value in items['property_types'].items():
        new_property_type_code = key.upper()
        property_type_not_exists = session.get_property_types(new_property_type_code).df.empty

        if property_type_not_exists:
            print(new_property_type_code)
            session.new_property_type(code=new_property_type_code, **value).save()

def create_new_object_types(session: pybis.pybis.Openbis, items: dict):
    """Create new object types in openBIS using details obtained from an YML file

    Args:
        session (pybis.pybis.Openbis): Connection between python and openBIS
        items (dict): Set of configuration details obtained from an YML file
    """
    all_object_types_database = session.get_object_types()

    for key, value in items['object_types'].items():
        new_object_type_code = key.upper()
        object_type_not_exists = session.get_object_types(new_object_type_code).df.empty
        
        if object_type_not_exists:
            print(new_object_type_code)
            sections = value.pop('sections')
            object_type = session.new_object_type(code=new_object_type_code,
                                                autoGeneratedCode=True,
                                                subcodeUnique=False,
                                                listable=True,
                                                showContainer=False,
                                                showParents=True,
                                                showParentMetadata=False,
                                                **value).save()
            for section, properties in sections.items():
                print(section, properties)
                for property_type in properties:
                    object_type.assign_property(session.get_property_type(code=property_type))
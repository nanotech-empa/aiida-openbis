# Import libraries
import os
import re
import yaml
import json
import pandas as pd
import numpy as np
import argparse
from pybis import Openbis
import warnings
import string
import sys
warnings.filterwarnings("ignore")

# Functions
def read_json(filepath: str) -> dict:
    return json.load(open(filepath, "r"))

def read_yaml(filepath: str):
    return yaml.safe_load(open(filepath, 'r'))

def create_object_type_in_openbis(session, object_type_dict: dict):
    try:
        object_type = session.get_object_type(object_type_dict["code"])
    except ValueError:
        print(f"{object_type_dict['code']} does not exist.")
        object_type = session.new_object_type(
            autoGeneratedCode=True, 
            subcodeUnique=False,
            listable=True,
            showContainer=False,
            showParents=True,
            showParentMetadata=False,
            **object_type_dict
        )
        object_type.save()
    
    return object_type

def create_vocabulary_in_openbis(session, vocabulary_dict: dict):
    try:
        session.new_vocabulary(**vocabulary_dict).save()
    except ValueError:
        print(f"{vocabulary_dict['code']} already exists.")

def create_experiment_type_in_openbis(session):
    try:
        experiment_type = session.new_experiment_type("EXPERIMENT", description = "Experiment")
        experiment_type.save()
        experiment_type.assign_property(prop = 'name', section = 'General info')
        experiment_type.assign_property(prop = 'default_collection_view', section = 'General info')
    except ValueError:
        print(f"Experiment type EXPERIMENT exists already.")
            
def create_property_type_in_openbis(session, property_type_dict: dict):
    session.new_property_type(**property_type_dict).save()
        
def create_space_in_openbis(session, space_code: str, space_info: dict):
    try:
        session.new_space(code=space_code, description = space_info["description"]).save()
    except ValueError:
        print(f"Space {space_code} exists already.")
        session.get_space(code = space_code)

def create_project_in_openbis(session, space_code: str, project_code: str, project_info: dict):
    try:
        session.new_project(space = space_code, code=project_code, description = project_info["description"]).save()
    except ValueError:
        print(f"Project {project_code} exists already.")

def create_experiment_in_openbis(session, space_code: str, project_code: str, experiment_code: str, experiment_info: dict):
    try:
        experiment = session.new_experiment(code = experiment_code, type = "COLLECTION", project = f"/{space_code}/{project_code}/")
        experiment.set_props({"name": experiment_info["name"]})
        experiment.save()
    except ValueError:
        print(f"Experiment {experiment_code} exists already.")
            
def show_object_in_openbis_menu(session, object_type_code: str):
    settings_sample = session.get_sample("/ELN_SETTINGS/GENERAL_ELN_SETTINGS")
    try:
        settings = json.loads(settings_sample.props["eln_settings"])
        settings['sampleTypeDefinitionsExtension'][object_type_code] = {'SAMPLE_PARENTS_DISABLED': False,
                                                                        'SAMPLE_PARENTS_ANY_TYPE_DISABLED': False,
                                                                        'SAMPLE_CHILDREN_DISABLED': False,
                                                                        'SAMPLE_CHILDREN_ANY_TYPE_DISABLED': False,
                                                                        'USE_AS_PROTOCOL': False,
                                                                        'ENABLE_STORAGE': False,
                                                                        'SHOW': True, 
                                                                        'SHOW_ON_NAV': True}
        settings_sample.props['eln_settings'] = json.dumps(settings)
        settings_sample.save()
    except TypeError:
        print("The object is not available in the main menu. For that, open openBIS, go to Settings, click on Edit, open one object type in the Object Type definitions Extension and add to the main menu. Then, this function works.")

def assign_properties_to_object_type_in_openbis(session, object_type, object_property_types: list[str]):
    for property_code in object_property_types:
        try:
            object_type.assign_property(session.get_property_type(code=property_code))
        except ValueError:
            print(f"{property_code} does not exist.")
            
def log_in(openbis_url: str, openbis_user: str, openbis_pw: str):
    """Function to login to openBIS."""
    if Openbis(openbis_url, verify_certificates=False).is_token_valid():
        return Openbis(openbis_url, verify_certificates=False)
    else:
        Openbis(openbis_url, verify_certificates=False).login(openbis_user, openbis_pw, save_token=True)
        return Openbis(openbis_url, verify_certificates=False)
    
# Classes
class OpenBisDatabase:
    def __init__(self, openbis_url: str, openbis_user: str):
        self.openbis_url = openbis_url
        self.openbis_user = openbis_user
    
    def connect(self, openbis_pw):
        self.session = log_in(self.openbis_url, self.openbis_user, openbis_pw)
    
    def set_schema(self, yaml_schema: dict):
        self.objects_schema = yaml_schema
    
    def create_object_type(self, object_type_details: dict):
        object_type_dict = {
            "code": object_type_details["annotations"]["openbis_label"].replace(" ", "_"),
            "generatedCodePrefix": object_type_details["annotations"]["openbis_code"]
        }
        
        object_type = create_object_type_in_openbis(self.session, object_type_dict)
        
        return object_type
    
    def create_vocabulary(self, property_type: str) -> str:
        vocabulary_dict = self.generate_vocabulary_dictionary(property_type)
        create_vocabulary_in_openbis(self.session, vocabulary_dict)
        return vocabulary_dict["code"]

    def generate_vocabulary_dictionary(self, property_type: str) -> dict:
        property_type_range = self.objects_schema["slots"][property_type]["range"]
        vocabularies = self.objects_schema["enums"]
        
        vocabulary_dict = {
            "code": property_type_range,
            "description": vocabularies[property_type_range]["description"],
            "terms": []
        }
        
        for term, term_details in vocabularies[property_type_range]["permissible_values"].items():
            term_dict = {
                "code": term,
                "description": term_details["description"],
                "label": term_details["annotations"]["openbis_label"]
            }
            
            vocabulary_dict["terms"].append(term_dict)
        
        return vocabulary_dict
    
    def generate_property_type_dictionary(self, property_type: str) -> dict:
        property_type_dict = {
            "code": property_type,
            "label": self.objects_schema["slots"][property_type]["annotations"]["openbis_label"],
            "description": self.objects_schema["slots"][property_type]["description"],
            "dataType": self.objects_schema["slots"][property_type]["annotations"]["openbis_type"],
            "managedInternally": False,
            "multiValue": self.objects_schema["slots"][property_type]["multivalued"]
        }
        
        if property_type_dict["dataType"] == "OBJECT":
            property_type_dict["dataType"] = "SAMPLE"
        
        if property_type_dict["dataType"] == "MULTILINE_VARCHAR":
            property_type_dict["metaData"] = {"custom_widget": "Word Processor"}
        
        if property_type_dict["dataType"] == "XML (Spreadsheet)":
            property_type_dict["dataType"] = "XML"
            property_type_dict["metaData"] = {"custom_widget": "Spreadsheet"}
            property_type_dict["multiValue"] = False
        
        if property_type_dict["dataType"] == "CONTROLLEDVOCABULARY":
            property_type_dict["vocabulary"] = self.create_vocabulary(property_type)
        
        return property_type_dict
    
    def create_property_type(self, property_type: str) -> str:
        if self.objects_schema["slots"][property_type]["annotations"]["openbis_type"] not in ["Not used", "OBJECT (PARENT)", "OBJECT (CHILDREN)"]:
            property_type_openbis = self.session.get_property_types(code = property_type)
            if property_type_openbis:
                print(f"{property_type} already exists.")
                return property_type
            else:
                property_type_dict = self.generate_property_type_dictionary(property_type)
                create_property_type_in_openbis(self.session, property_type_dict)
                return property_type
        else:
            return None
    
    def setup_openbis_database(self, collections_config_filepath: str):
        # Create property type and link it to ATTACHMENT dataset type
        documentation_website_property = self.session.get_property_types("DOCUMENTATION_WEBSITE")
        if documentation_website_property.df.empty:
            ds_property_type = self.session.new_property_type(
                code = "documentation_website",
                label = "Documentation website",
                description = "Documentation website",
                dataType = "HYPERLINK"
            )
            ds_property_type.save()
            attachment_ds_type = self.session.get_dataset_type("ATTACHMENT")
            attachment_ds_type.assign_property(ds_property_type)
            attachment_ds_type.save()
        
        # Create object types in openBIS following the LinkML schema
        for _, object in self.objects_schema["classes"].items():
            object_property_types = []
            
            # Evaluate whether the object is going to be an openBIS object type
            if object["annotations"]["openbis_object"]:
                
                # Evaluate whether the object contains properties
                if "slots" in object:
                    
                    # Get all the property types until the last parent class
                    object_copy = object
                    while "is_a" in object_copy:
                        parent_object = self.objects_schema["classes"][object_copy["is_a"]]
                        
                        # Used when the object inherits all the properties from another object
                        if object["slots"]:
                            object["slots"] = parent_object["slots"] + object["slots"]
                        else:
                            object["slots"] = parent_object["slots"]
                            
                        object_copy = parent_object
                    
                    # Create property types needed for intialiasing the openBIS object type
                    for property_type_code in object["slots"]:
                        property_type = self.create_property_type(property_type_code)
                        if property_type is not None:
                            object_property_types.append(property_type)

                    object_type = self.create_object_type(object)
                    assign_properties_to_object_type_in_openbis(self.session, object_type, object_property_types)
                    
                    # Enable the options to show the object in the openBIS GUI main menu
                    show_object_in_openbis_menu(self.session, object_type.code)
        
        # Create experiment type EXPERIMENT
        create_experiment_type_in_openbis(self.session)
        
        # Create collections in openBIS
        collections_config = read_json(collections_config_filepath)
        
        # Create spaces in openBIS
        for space_code, space_info in collections_config["spaces"].items():
            create_space_in_openbis(self.session, space_code, space_info)
            
            # Create projects in openBIS
            if "projects" in space_info:
                for project_code, project_info in space_info["projects"].items():
                    create_project_in_openbis(self.session, space_code, project_code, project_info)
                    
                    # Create experiments in openBIS
                    if "experiments" in project_info:
                        for experiment_code, experiment_info in project_info["experiments"].items():
                            create_experiment_in_openbis(self.session, space_code, project_code, experiment_code, experiment_info)
                            
# Set up openBIS environment
if __name__ == "__main__":
    # Read command line arguments
    
    parser = argparse.ArgumentParser(description = 'Setup the openBIS database (create objects types, collections, etc.).')

    # Define the arguments with flags
    parser.add_argument('-o', '--openbis_url', type=str, help='OpenBIS URL', default = 'https://local.openbis.ch/openbis')
    parser.add_argument('-u', '--openbis_user', type=str, help='OpenBIS User', default = 'admin')
    parser.add_argument('-pw', '--openbis_pw', type=str, help='OpenBIS Password', default = '123456789')
    parser.add_argument('-r', '--root_folder_path', type=str, 
                        help='Folder obtained from GitHub that contains all the directories necessary to setup openBIS, like schema, scripts, etc.', 
                        default = "/home/jovyan/aiida-openbis/Notebooks")

    args = parser.parse_args()
    
    openbis_url = args.openbis_url
    openbis_user = args.openbis_user
    openbis_pw = args.openbis_pw
    root_folder_path = args.root_folder_path
    
    if not root_folder_path:
        print("Root folder path was not specified.")
        print(f'Usage: python3 setup_openbis_using_linkml.py -o <OPENBIS_URL> -u <OPENBIS_USER> -pw <OPENBIS_PW> -r <ROOT_FOLDER>')
    
    else:
        # Create openBIS database instance
        openbis_database = OpenBisDatabase(openbis_url, openbis_user)

        # Connect to openBIS
        openbis_database.connect(openbis_pw)

        # Load LinkML schema
        schema_filepath = os.path.join(root_folder_path, "Metadata_Schemas_LinkML", "materialMLinfo.yaml")
        openbis_database.set_schema(read_yaml(schema_filepath))

        # Setup openBIS database (create object types, experiment type, and collections)
        collections_config_filepath = os.path.join(root_folder_path, "scripts", "collections_config.json")
        openbis_database.setup_openbis_database(collections_config_filepath)

    #TODO: Document the class and functions and try to simplify
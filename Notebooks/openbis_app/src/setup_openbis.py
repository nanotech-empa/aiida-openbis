import inspect
import os
import sys
from pydantic import BaseModel
from typing import get_origin, get_args
from enum import Enum
import json
from pybis import Openbis
from tqdm import tqdm
import argparse

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from schema import openbis_objects

def extract_enum_info(field_annotation):
    enum_name = None
    enum_keys = None
    enum_values = None

    try:
        if issubclass(field_annotation, Enum):
            enum_name = field_annotation.__name__
            enum_keys = [e.name for e in field_annotation]
            enum_values = [e.value for e in field_annotation]
            return enum_name, enum_keys, enum_values
    except TypeError:
        pass

    origin = get_origin(field_annotation)
    if origin in (list, tuple, set):
        args = get_args(field_annotation)
        if args:
            inner_type = args[0]
            try:
                if issubclass(inner_type, Enum):
                    enum_name = inner_type.__name__
                    enum_keys = [e.name for e in inner_type]
                    enum_values = [e.value for e in inner_type]
                    return enum_name, enum_keys, enum_values
            except TypeError:
                pass

    return None, None, None

def read_json(filepath: str) -> dict:
    return json.load(open(filepath, "r"))

def create_space_in_openbis(session, space_code: str, space_info: dict):
    try:
        session.new_space(code=space_code, description = space_info["description"]).save()
    except ValueError:
        print(f"Space {space_code} exists already.")
        session.get_space(code = space_code)

def create_project_in_openbis(session, space_code: str, project_code: str, project_info: dict):
    try:
        session.new_project(space = space_code, code=project_code, description = project_info["description"]).save()
    except ValueError:
        print(f"Project {project_code} exists already.")

def create_experiment_in_openbis(session, space_code: str, project_code: str, experiment_code: str, experiment_info: dict):
    try:
        experiment = session.new_experiment(code = experiment_code, type = "COLLECTION", project = f"/{space_code}/{project_code}/")
        experiment.set_props({"name": experiment_info["name"]})
        experiment.save()
    except ValueError:
        print(f"Experiment {experiment_code} exists already.")

def create_experiment_type_in_openbis(session):
    try:
        experiment_type = session.new_experiment_type("EXPERIMENT", description = "Experiment")
        experiment_type.save()
        experiment_type.assign_property(prop = 'name', section = 'General info')
        experiment_type.assign_property(prop = 'default_collection_view', section = 'General info')
    except ValueError:
        print(f"Experiment type EXPERIMENT exists already.")

def create_property_type_in_openbis(session, property_type_dict: dict):
    try:
        property_type = session.get_property_type(property_type_dict["code"])
    except ValueError:
        property_type = session.new_property_type(**property_type_dict)
        property_type.save()
    return property_type

def create_object_type_in_openbis(session, object_type_dict: dict):
    try:
        object_type = session.get_object_type(object_type_dict["code"])
    except ValueError:
        object_type = session.new_object_type(
            autoGeneratedCode=True, 
            subcodeUnique=False,
            listable=True,
            showContainer=False,
            showParents=True,
            showParentMetadata=False,
            **object_type_dict
        )
        object_type.save()
    
    return object_type

def create_vocabulary_in_openbis(session, vocabulary_dict: dict):
    try:
        vocabulary = session.get_vocabulary(vocabulary_dict["code"])
    except ValueError:
        vocabulary = session.new_vocabulary(**vocabulary_dict)
        vocabulary.save()
    
    return vocabulary

def assign_property_to_object_type_in_openbis(session, object_type, property_type):
    try:
        object_type.assign_property(session.get_property_type(property_type.code))
    except ValueError:
        print(f"{property_type.code} does not exist.")
        
def log_in(eln_url: str, eln_token: str):
    try:
        session = Openbis(eln_url, verify_certificates = False)
        session.set_token(eln_token)
    except ValueError:
        print("Session is no longer valid. Please check if the token is still valid.")
        session = None
    
    return session

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description = 'Setup the openBIS database (create objects types, collections, etc.).')

    # Define the arguments with flags
    parser.add_argument('-u', '--openbis_url', type=str, help='OpenBIS URL', default = 'https://local.openbis.ch/openbis')
    parser.add_argument('-t', '--openbis_token', type=str, help='OpenBIS User', default = '$pat-admin-250731124326911xD6B6FB8A855F97B9003A63626810D9CA')
    parser.add_argument('-p', '--config_filepath', type=str, 
                        help='File that contains the spaces, projects, and collections configuration', 
                        default = "/home/jovyan/aiida-openbis/Notebooks/openbis_app/schema/collections_config.json")

    args = parser.parse_args()
    openbis_url = args.openbis_url
    openbis_token = args.openbis_token
    config_filepath = args.config_filepath
    print(f"Running setup on URL: {openbis_url} with the token: {openbis_token} and using the config file {config_filepath}")
    
    # Connect to openBIS
    session = log_in(openbis_url, openbis_token)
    
    if session and config_filepath:
        # Get all classes defined in the openbis_objects module (not ones imported into it)
        openbis_classes = [
            cls for name, cls in inspect.getmembers(openbis_objects, inspect.isclass)
            if cls.__module__ == openbis_objects.__name__
        ]

        for cls in tqdm(openbis_classes):
            if issubclass(cls, BaseModel) and hasattr(cls, "get_code"):
                object_code = cls.get_label().replace(" ", "_")
                object_type_dict = {"generatedCodePrefix": cls.get_code(), "code": object_code}
                
                # Create object type
                object_type = create_object_type_in_openbis(session, object_type_dict)
                
                if object_code.upper() == "MEASUREMENT_SESSION":
                    try:
                        property_type = session.get_property_type("default_object_view")
                        assign_property_to_object_type_in_openbis(session, object_type, property_type)
                    except ValueError:
                        print(f"Property type default_object_view does not exist.")
                
                for name, field in cls.model_fields.items():
                    property_type_dict = {
                        "code": name,
                        "label": field.title,
                        "description": " "
                    }
                    field_metadata = field.json_schema_extra.get("metadata", {})
                    create_property_type = True
                    if field_metadata:
                        field_datatype = field_metadata.get("type", "")
                        field_multivalue = field_metadata.get("multivalue", False)
                        property_type_dict["multiValue"] = field_multivalue
                        if field_datatype in ["BOOLEAN", "DATE", "HYPERLINK", "INTEGER", "JSON", "SAMPLE", "REAL", "TIMESTAMP", "VARCHAR"]:
                            property_type_dict["dataType"] = field_datatype
                            
                        elif field_datatype == "MULTILINE_VARCHAR":
                            property_type_dict["dataType"] = field_datatype
                            if "custom_widget" in field_metadata:
                                field_custom_widget = field_metadata["custom_widget"]
                                property_type_dict["metaData"] = {"custom_widget": field_custom_widget}
                                
                        elif field_datatype == "XML":
                            property_type_dict["dataType"] = field_datatype
                            if "custom_widget" in field_metadata:
                                field_custom_widget = field_metadata["custom_widget"]
                                property_type_dict["metaData"] = {"custom_widget": field_custom_widget}
                                
                        elif field_datatype == "CONTROLLEDVOCABULARY":
                            property_type_dict["dataType"] = field_datatype
                            enum_name, enum_keys, enum_values = extract_enum_info(field.annotation)
                            if enum_name and enum_keys and enum_values:
                                vocabulary_dict = {"code": enum_name, "terms": []}
                                for key, value in zip(enum_keys, enum_values):
                                    term_dict = {"code": key, "label": value}
                                    vocabulary_dict["terms"].append(term_dict)
                            
                            # Create vocabulary
                            vocabulary = create_vocabulary_in_openbis(session, vocabulary_dict)
                            property_type_dict["vocabulary"] = vocabulary
                        else:
                            create_property_type = False
                    else:
                        create_property_type = False
                    
                    if create_property_type:
                        # Create property type and assign it to the current object type
                        property_type = create_property_type_in_openbis(session, property_type_dict)
                        assign_property_to_object_type_in_openbis(session, object_type, property_type)

        # Create property type and link it to ATTACHMENT dataset type
        documentation_website_property = session.get_property_types("DOCUMENTATION_WEBSITE")
        if documentation_website_property.df.empty:
            ds_property_type = session.new_property_type(
                code = "documentation_website",
                label = "Documentation website",
                description = "Documentation website",
                dataType = "HYPERLINK"
            )
            ds_property_type.save()
            attachment_ds_type = session.get_dataset_type("ATTACHMENT")
            attachment_ds_type.assign_property(ds_property_type)
            attachment_ds_type.save()

        # Create experiment type EXPERIMENT
        create_experiment_type_in_openbis(session)

        # Create collections in openBIS
        collections_config = read_json(config_filepath)

        # Create spaces in openBIS
        for space_code, space_info in collections_config["spaces"].items():
            create_space_in_openbis(session, space_code, space_info)
            
            # Create projects in openBIS
            if "projects" in space_info:
                for project_code, project_info in space_info["projects"].items():
                    create_project_in_openbis(session, space_code, project_code, project_info)
                    
                    # Create experiments in openBIS
                    if "experiments" in project_info:
                        for experiment_code, experiment_info in project_info["experiments"].items():
                            create_experiment_in_openbis(session, space_code, project_code, experiment_code, experiment_info)